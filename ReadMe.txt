----project---

//	 @OneToMany(fetch = FetchType.LAZY , mappedBy = "projectinfo" , cascade = CascadeType.ALL)
//	 private List<Taskinfo> taskinfolist;

----task----------


@ManyToOne(cascade = CascadeType.ALL)
	@JoinColumn(name="Project_ID")
	private Projectinfo projectinfo;
	

    
    
    
 The @JsonManagedReference and @JsonBackReference annotations are part of the 
 Jackson library and are used to handle cyclic dependencies in JSON serialization. 
 They help in managing bidirectional relationships to prevent infinite recursion during serialization.

@JsonManagedReference: This annotation is used on the forward part of the 
reference – the one that gets serialized normally. 
It is typically placed on the field of the parent entity (e.g., Projectinfo)
 that you want to include in the JSON response.

@JsonBackReference: This annotation is used on the back part of the reference – 
the one that should not be serialized as it may cause recursion. It is typically placed on 
the field of the child entity (e.g., Taskinfo) that should not be included when serializing 
the parent entity.
    
    
	    // this will create comment for the taskid given  if the taksid is not present it will create new task and taskid will be autogenerated
//	    @PostMapping("/task/{taskid}")
//	    public Comments addCommentsToTask(@RequestBody Comments comment,@PathVariable int taskid) 
//	    {
//	    	 
//	    	Taskinfo task = comment.getTaskinfo();
//	    	 if (task != null && task.getTask_ID() != 0) 
//	    	 {
//	             Optional<Taskinfo> existingTask = taskinfoRepository.findById(task.getTask_ID());
//	             if (existingTask.isPresent()) 
//	             {
//	                 comment.setTaskinfo(existingTask.get());
//	             } else 
//	             {
//	                 task.setTask_ID(taskid);
//	                 taskinfoRepository.save(task);
//	                 comment.setTaskinfo(task);
//	             }   
//	    	 }   
//	             
//	    	
//	    	return commentrepository.save(comment);
//	    	 
//	   }
    
	

	